<!doctype html>
<html>

<head>
    <style>
        #my-canvas {
            border: 1px solid white;
        }
    </style>
</head>

<body>

    <canvas id="my-canvas" width="750" height="500"></canvas>
    <script>

        var buffer = [128 * 64 / 8];

        var SATIR1 = 7
        var SATIR2 = 15
        var SATIR3 = 23
        var SATIR4 = 31
        var SATIR5 = 39
        var SATIR6 = 47
        var SATIR7 = 55
        var SATIR8 = 63

        var SYMBOL_KILIT = 131
        var SYMBOL_DERECE = 130
        var SYMBOL_FAN1 = 132
        var SYMBOL_FAN2 = 133
        var SYMBOL_BUZZER1 = 134
        var SYMBOL_BUZZER2 = 135
        var SYMBOL_BAT1 = 136
        var SYMBOL_BAT2 = 137
        var SYMBOL_THERMISTOR1 = 138
        var SYMBOL_THERMISTOR2 = 139


        var Font12x16 = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x00
            0x00, 0x00, 0xF0, 0x03, 0x0C, 0x0C, 0x02, 0x10, 0x32, 0x11, 0x31, 0x22, 0x01, 0x22, 0x31, 0x22, 0x32, 0x11, 0x02, 0x10, 0x0C, 0x0C, 0xF0, 0x03, // 0x01
            0x00, 0x00, 0xF0, 0x03, 0xFC, 0x0F, 0xFE, 0x1F, 0xCE, 0x1E, 0xCF, 0x3D, 0xFF, 0x3D, 0xCF, 0x3D, 0xCE, 0x1E, 0xFE, 0x1F, 0xFC, 0x0F, 0xF0, 0x03, // 0x02
            0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0xF8, 0x01, 0xF8, 0x03, 0xF0, 0x07, 0xE0, 0x0F, 0xF0, 0x07, 0xF8, 0x03, 0xF8, 0x01, 0xF0, 0x00, 0x00, 0x00, // 0x03
            0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xC0, 0x01, 0xE0, 0x03, 0xF0, 0x07, 0xF8, 0x0F, 0xF0, 0x07, 0xE0, 0x03, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00, // 0x04
            0x00, 0x00, 0x80, 0x03, 0xC0, 0x07, 0xC0, 0x07, 0xB8, 0x13, 0xFC, 0x1B, 0xFC, 0x1F, 0xFC, 0x1B, 0xB8, 0x13, 0xC0, 0x07, 0xC0, 0x07, 0x80, 0x03, // 0x05
            0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0xC0, 0x07, 0xE0, 0x17, 0xF0, 0x1B, 0xFC, 0x1F, 0xF0, 0x1B, 0xE0, 0x17, 0xC0, 0x07, 0x80, 0x03, 0x00, 0x00, // 0x06
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x07
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x08
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x09
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x0A
            0x00, 0x00, 0x80, 0x03, 0xC0, 0x07, 0x60, 0x0C, 0x20, 0x08, 0x20, 0x08, 0x60, 0x0C, 0xC8, 0x07, 0xA8, 0x03, 0x18, 0x00, 0x78, 0x00, 0x00, 0x00, // 0x0B
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0xF8, 0x08, 0x8C, 0x09, 0x04, 0x3F, 0x04, 0x3F, 0x8C, 0x09, 0xF8, 0x08, 0x70, 0x00, 0x00, 0x00, // 0x0C
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x0D
            0x00, 0x00, 0x00, 0x06, 0x00, 0x0F, 0x00, 0x0F, 0xFF, 0x07, 0x33, 0x00, 0x66, 0x30, 0xCC, 0x78, 0x98, 0x79, 0xF0, 0x3F, 0x00, 0x00, 0x00, 0x00, // 0x0E
            0x00, 0x00, 0x80, 0x00, 0xC8, 0x09, 0xF0, 0x07, 0x30, 0x06, 0x18, 0x0C, 0x1E, 0x3C, 0x18, 0x0C, 0x30, 0x06, 0xF0, 0x07, 0xC8, 0x09, 0x80, 0x00, // 0x0F
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x1F, 0xF8, 0x0F, 0xF0, 0x07, 0xE0, 0x03, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x10
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xC0, 0x01, 0xE0, 0x03, 0xF0, 0x07, 0xF8, 0x0F, 0xFC, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x11
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x04, 0x18, 0x0C, 0x1C, 0x1C, 0xFE, 0x3F, 0x1C, 0x1C, 0x18, 0x0C, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00, // 0x12
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x37, 0xFE, 0x37, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x37, 0xFE, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x13
            0x00, 0x00, 0x38, 0x00, 0x7C, 0x00, 0xC6, 0x00, 0x82, 0x00, 0xFE, 0x3F, 0xFE, 0x3F, 0x02, 0x00, 0xFE, 0x3F, 0xFE, 0x3F, 0x02, 0x00, 0x00, 0x00, // 0x14
            0x00, 0x00, 0x00, 0x00, 0xDC, 0x08, 0xFE, 0x19, 0x22, 0x11, 0x22, 0x11, 0x22, 0x11, 0x22, 0x11, 0xE6, 0x1F, 0xC4, 0x0E, 0x00, 0x00, 0x00, 0x00, // 0x15
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x00, // 0x16
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x44, 0x0C, 0x4C, 0x0E, 0x5C, 0xFF, 0x7F, 0x0E, 0x5C, 0x0C, 0x4C, 0x08, 0x44, 0x00, 0x00, 0x00, 0x00, // 0x17
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x18, 0x00, 0x1C, 0x00, 0xFE, 0x3F, 0x1C, 0x00, 0x18, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x18
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x1C, 0xFE, 0x3F, 0x00, 0x1C, 0x00, 0x0C, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // 0x19
            0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xF0, 0x07, 0xE0, 0x03, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00, // 0x1A
            0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xC0, 0x01, 0xE0, 0x03, 0xF0, 0x07, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, // 0x1B
            0x00, 0x00, 0x00, 0x3F, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, // 0x1C
            0x00, 0x00, 0x80, 0x00, 0xC0, 0x01, 0xE0, 0x03, 0xF0, 0x07, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xF0, 0x07, 0xE0, 0x03, 0xC0, 0x01, 0x80, 0x00, // 0x1D
            0x00, 0x00, 0x00, 0x04, 0x00, 0x06, 0x00, 0x07, 0x80, 0x07, 0xC0, 0x07, 0xE0, 0x07, 0xC0, 0x07, 0x80, 0x07, 0x00, 0x07, 0x00, 0x06, 0x00, 0x04, // 0x1E
            0x00, 0x00, 0x20, 0x00, 0x60, 0x00, 0xE0, 0x00, 0xE0, 0x01, 0xE0, 0x03, 0xE0, 0x07, 0xE0, 0x03, 0xE0, 0x01, 0xE0, 0x00, 0x60, 0x00, 0x20, 0x00, // 0x1F
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x20
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0xFF, 0x33, 0xFF, 0x33, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x21
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x22
            0x00, 0x00, 0x00, 0x02, 0x10, 0x1E, 0x90, 0x1F, 0xF0, 0x03, 0x7E, 0x02, 0x1E, 0x1E, 0x90, 0x1F, 0xF0, 0x03, 0x7E, 0x02, 0x1E, 0x00, 0x10, 0x00, // 0x23
            0x00, 0x00, 0x00, 0x00, 0x78, 0x04, 0xFC, 0x0C, 0xCC, 0x0C, 0xFF, 0x3F, 0xFF, 0x3F, 0xCC, 0x0C, 0xCC, 0x0F, 0x88, 0x07, 0x00, 0x00, 0x00, 0x00, // 0x24
            0x00, 0x00, 0x00, 0x30, 0x38, 0x38, 0x38, 0x1C, 0x38, 0x0E, 0x00, 0x07, 0x80, 0x03, 0xC0, 0x01, 0xE0, 0x38, 0x70, 0x38, 0x38, 0x38, 0x1C, 0x00, // 0x25
            0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xB8, 0x3F, 0xFC, 0x31, 0xC6, 0x21, 0xE2, 0x37, 0x3E, 0x1E, 0x1C, 0x1C, 0x00, 0x36, 0x00, 0x22, 0x00, 0x00, // 0x26
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x3F, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x27
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x03, 0xFC, 0x0F, 0xFE, 0x1F, 0x07, 0x38, 0x01, 0x20, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x28
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x01, 0x20, 0x07, 0x38, 0xFE, 0x1F, 0xFC, 0x0F, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x29
            0x00, 0x00, 0x00, 0x00, 0x98, 0x0C, 0xB8, 0x0E, 0xE0, 0x03, 0xF8, 0x0F, 0xF8, 0x0F, 0xE0, 0x03, 0xB8, 0x0E, 0x98, 0x0C, 0x00, 0x00, 0x00, 0x00, // 0x2A
            0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xF0, 0x0F, 0xF0, 0x0F, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, // 0x2B
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB8, 0x00, 0xF8, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x2C
            0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, // 0x2D
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x2E
            0x00, 0x00, 0x00, 0x18, 0x00, 0x1C, 0x00, 0x0E, 0x00, 0x07, 0x80, 0x03, 0xC0, 0x01, 0xE0, 0x00, 0x70, 0x00, 0x38, 0x00, 0x1C, 0x00, 0x0E, 0x00, // 0x2F
            0x00, 0x00, 0xF8, 0x07, 0xFE, 0x1F, 0x06, 0x1E, 0x03, 0x33, 0x83, 0x31, 0xC3, 0x30, 0x63, 0x30, 0x33, 0x30, 0x1E, 0x18, 0xFE, 0x1F, 0xF8, 0x07, // 0x30
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x30, 0x0C, 0x30, 0x0E, 0x30, 0xFF, 0x3F, 0xFF, 0x3F, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, // 0x31
            0x00, 0x00, 0x1C, 0x30, 0x1E, 0x38, 0x07, 0x3C, 0x03, 0x3E, 0x03, 0x37, 0x83, 0x33, 0xC3, 0x31, 0xE3, 0x30, 0x77, 0x30, 0x3E, 0x30, 0x1C, 0x30, // 0x32
            0x00, 0x00, 0x0C, 0x0C, 0x0E, 0x1C, 0x07, 0x38, 0xC3, 0x30, 0xC3, 0x30, 0xC3, 0x30, 0xC3, 0x30, 0xC3, 0x30, 0xE7, 0x39, 0x7E, 0x1F, 0x3C, 0x0E, // 0x33
            0x00, 0x00, 0xC0, 0x03, 0xE0, 0x03, 0x70, 0x03, 0x38, 0x03, 0x1C, 0x03, 0x0E, 0x03, 0x07, 0x03, 0xFF, 0x3F, 0xFF, 0x3F, 0x00, 0x03, 0x00, 0x03, // 0x34
            0x00, 0x00, 0x3F, 0x0C, 0x7F, 0x1C, 0x63, 0x38, 0x63, 0x30, 0x63, 0x30, 0x63, 0x30, 0x63, 0x30, 0x63, 0x30, 0xE3, 0x38, 0xC3, 0x1F, 0x83, 0x0F, // 0x35
            0x00, 0x00, 0xC0, 0x0F, 0xF0, 0x1F, 0xF8, 0x39, 0xDC, 0x30, 0xCE, 0x30, 0xC7, 0x30, 0xC3, 0x30, 0xC3, 0x30, 0xC3, 0x39, 0x80, 0x1F, 0x00, 0x0F, // 0x36
            0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x30, 0x03, 0x3C, 0x03, 0x0F, 0xC3, 0x03, 0xF3, 0x00, 0x3F, 0x00, 0x0F, 0x00, 0x03, 0x00, // 0x37
            0x00, 0x00, 0x00, 0x0F, 0xBC, 0x1F, 0xFE, 0x39, 0xE7, 0x30, 0xC3, 0x30, 0xC3, 0x30, 0xC3, 0x30, 0xE7, 0x30, 0xFE, 0x39, 0xBC, 0x1F, 0x00, 0x0F, // 0x38
            0x00, 0x00, 0x3C, 0x00, 0x7E, 0x00, 0xE7, 0x30, 0xC3, 0x30, 0xC3, 0x30, 0xC3, 0x38, 0xC3, 0x1C, 0xC3, 0x0E, 0xE7, 0x07, 0xFE, 0x03, 0xFC, 0x00, // 0x39
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x1C, 0x70, 0x1C, 0x70, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x3A
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x9C, 0x70, 0xFC, 0x70, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x3B
            0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0xE0, 0x01, 0xF0, 0x03, 0x38, 0x07, 0x1C, 0x0E, 0x0E, 0x1C, 0x07, 0x38, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, // 0x3C
            0x00, 0x00, 0x00, 0x00, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x00, 0x00, // 0x3D
            0x00, 0x00, 0x00, 0x00, 0x03, 0x30, 0x07, 0x38, 0x0E, 0x1C, 0x1C, 0x0E, 0x38, 0x07, 0xF0, 0x03, 0xE0, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x3E
            0x00, 0x00, 0x1C, 0x00, 0x1E, 0x00, 0x07, 0x00, 0x03, 0x00, 0x83, 0x37, 0xC3, 0x37, 0xE3, 0x00, 0x77, 0x00, 0x3E, 0x00, 0x1C, 0x00, 0x00, 0x00, // 0x3F
            0x00, 0x00, 0xF8, 0x0F, 0xFE, 0x1F, 0x07, 0x18, 0xF3, 0x33, 0xFB, 0x37, 0x1B, 0x36, 0xFB, 0x37, 0xFB, 0x37, 0x07, 0x36, 0xFE, 0x03, 0xF8, 0x01, // 0x40
            0x00, 0x00, 0x00, 0x38, 0x00, 0x3F, 0xE0, 0x07, 0xFC, 0x06, 0x1F, 0x06, 0x1F, 0x06, 0xFC, 0x06, 0xE0, 0x07, 0x00, 0x3F, 0x00, 0x38, 0x00, 0x00, // 0x41     A
            0x00, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0xC3, 0x30, 0xC3, 0x30, 0xC3, 0x30, 0xC3, 0x30, 0xE7, 0x30, 0xFE, 0x39, 0xBC, 0x1F, 0x00, 0x0F, 0x00, 0x00, // 0x42     B
            0x00, 0x00, 0xF0, 0x03, 0xFC, 0x0F, 0x0E, 0x1C, 0x07, 0x38, 0x03, 0x30, 0x03, 0x30, 0x03, 0x30, 0x07, 0x38, 0x0E, 0x1C, 0x0C, 0x0C, 0x00, 0x00, // 0x43     C
            0x00, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0x03, 0x30, 0x03, 0x30, 0x03, 0x30, 0x03, 0x30, 0x07, 0x38, 0x0E, 0x1C, 0xFC, 0x0F, 0xF0, 0x03, 0x00, 0x00, // 0x44     D
            0x00, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0xC3, 0x30, 0xC3, 0x30, 0xC3, 0x30, 0xC3, 0x30, 0xC3, 0x30, 0xC3, 0x30, 0x03, 0x30, 0x03, 0x30, 0x00, 0x00, // 0x45     E
            0x00, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0xC3, 0x00, 0xC3, 0x00, 0xC3, 0x00, 0xC3, 0x00, 0xC3, 0x00, 0xC3, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, // 0x46     F
            0x00, 0x00, 0xF0, 0x03, 0xFC, 0x0F, 0x0E, 0x1C, 0x07, 0x38, 0x03, 0x30, 0xC3, 0x30, 0xC3, 0x30, 0xC3, 0x30, 0xC7, 0x3F, 0xC6, 0x3F, 0x00, 0x00, // 0x47     G
            0x00, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0x00, 0x00, // 0x48     H
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x30, 0x03, 0x30, 0xFF, 0x3F, 0xFF, 0x3F, 0x03, 0x30, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x49     I
            0x00, 0x00, 0x00, 0x0E, 0x00, 0x1E, 0x00, 0x38, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x38, 0xFF, 0x1F, 0xFF, 0x07, 0x00, 0x00, // 0x4A     J
            0x00, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0xC0, 0x00, 0xE0, 0x01, 0xF0, 0x03, 0x38, 0x07, 0x1C, 0x0E, 0x0E, 0x1C, 0x07, 0x38, 0x03, 0x30, 0x00, 0x00, // 0x4B     K
            0x00, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, // 0x4C     L
            0x00, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0x1E, 0x00, 0x78, 0x00, 0xE0, 0x01, 0xE0, 0x01, 0x78, 0x00, 0x1E, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0x00, 0x00, // 0x4D     M
            0x00, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0x0E, 0x00, 0x38, 0x00, 0xF0, 0x00, 0xC0, 0x03, 0x00, 0x07, 0x00, 0x1C, 0xFF, 0x3F, 0xFF, 0x3F, 0x00, 0x00, // 0x4E     N
            0x00, 0x00, 0xF0, 0x03, 0xFC, 0x0F, 0x0E, 0x1C, 0x07, 0x38, 0x03, 0x30, 0x03, 0x30, 0x07, 0x38, 0x0E, 0x1C, 0xFC, 0x0F, 0xF0, 0x03, 0x00, 0x00, // 0x4F     O
            0x00, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0x83, 0x01, 0x83, 0x01, 0x83, 0x01, 0x83, 0x01, 0x83, 0x01, 0xC7, 0x01, 0xFE, 0x00, 0x7C, 0x00, 0x00, 0x00, // 0x50
            0x00, 0x00, 0xF0, 0x03, 0xFC, 0x0F, 0x0E, 0x1C, 0x07, 0x38, 0x03, 0x30, 0x03, 0x36, 0x07, 0x3E, 0x0E, 0x1C, 0xFC, 0x3F, 0xF0, 0x33, 0x00, 0x00, // 0x51
            0x00, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0x83, 0x01, 0x83, 0x01, 0x83, 0x03, 0x83, 0x07, 0x83, 0x0F, 0xC7, 0x1D, 0xFE, 0x38, 0x7C, 0x30, 0x00, 0x00, // 0x52
            0x00, 0x00, 0x3C, 0x0C, 0x7E, 0x1C, 0xE7, 0x38, 0xC3, 0x30, 0xC3, 0x30, 0xC3, 0x30, 0xC3, 0x30, 0xC7, 0x39, 0x8E, 0x1F, 0x0C, 0x0F, 0x00, 0x00, // 0x53
            0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x54
            0x00, 0x00, 0xFF, 0x07, 0xFF, 0x1F, 0x00, 0x38, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x38, 0xFF, 0x1F, 0xFF, 0x07, 0x00, 0x00, // 0x55
            0x00, 0x00, 0x07, 0x00, 0x3F, 0x00, 0xF8, 0x01, 0xC0, 0x0F, 0x00, 0x3E, 0x00, 0x3E, 0xC0, 0x0F, 0xF8, 0x01, 0x3F, 0x00, 0x07, 0x00, 0x00, 0x00, // 0x56
            0x00, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0x00, 0x1C, 0x00, 0x06, 0x80, 0x03, 0x80, 0x03, 0x00, 0x06, 0x00, 0x1C, 0xFF, 0x3F, 0xFF, 0x3F, 0x00, 0x00, // 0x57
            0x00, 0x00, 0x03, 0x30, 0x0F, 0x3C, 0x1C, 0x0E, 0x30, 0x03, 0xE0, 0x01, 0xE0, 0x01, 0x30, 0x03, 0x1C, 0x0E, 0x0F, 0x3C, 0x03, 0x30, 0x00, 0x00, // 0x58
            0x00, 0x00, 0x03, 0x00, 0x0F, 0x00, 0x3C, 0x00, 0xF0, 0x00, 0xC0, 0x3F, 0xC0, 0x3F, 0xF0, 0x00, 0x3C, 0x00, 0x0F, 0x00, 0x03, 0x00, 0x00, 0x00, // 0x59
            0x00, 0x00, 0x03, 0x30, 0x03, 0x3C, 0x03, 0x3E, 0x03, 0x33, 0xC3, 0x31, 0xE3, 0x30, 0x33, 0x30, 0x1F, 0x30, 0x0F, 0x30, 0x03, 0x30, 0x00, 0x00, // 0x5A
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0x03, 0x30, 0x03, 0x30, 0x03, 0x30, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x5B
            0x00, 0x00, 0x0E, 0x00, 0x1C, 0x00, 0x38, 0x00, 0x70, 0x00, 0xE0, 0x00, 0xC0, 0x01, 0x80, 0x03, 0x00, 0x07, 0x00, 0x0E, 0x00, 0x1C, 0x00, 0x18, // 0x5C
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x30, 0x03, 0x30, 0x03, 0x30, 0x03, 0x30, 0xFF, 0x3F, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x5D
            0x00, 0x00, 0x60, 0x00, 0x70, 0x00, 0x38, 0x00, 0x1C, 0x00, 0x0E, 0x00, 0x07, 0x00, 0x0E, 0x00, 0x1C, 0x00, 0x38, 0x00, 0x70, 0x00, 0x60, 0x00, // 0x5E
            0x00, 0x00, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, // 0x5F
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x7E, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x60
            0x00, 0x00, 0x00, 0x1C, 0x40, 0x3E, 0x60, 0x33, 0x60, 0x33, 0x60, 0x33, 0x60, 0x33, 0x60, 0x33, 0x60, 0x33, 0xE0, 0x3F, 0xC0, 0x3F, 0x00, 0x00, // 0x61
            0x00, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0xC0, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0xE0, 0x38, 0xC0, 0x1F, 0x80, 0x0F, 0x00, 0x00, // 0x62
            0x00, 0x00, 0x80, 0x0F, 0xC0, 0x1F, 0xE0, 0x38, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0xC0, 0x18, 0x80, 0x08, 0x00, 0x00, // 0x63
            0x00, 0x00, 0x80, 0x0F, 0xC0, 0x1F, 0xE0, 0x38, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0xE0, 0x30, 0xC0, 0x30, 0xFF, 0x3F, 0xFF, 0x3F, 0x00, 0x00, // 0x64
            0x00, 0x00, 0x80, 0x0F, 0xC0, 0x1F, 0xE0, 0x3B, 0x60, 0x33, 0x60, 0x33, 0x60, 0x33, 0x60, 0x33, 0x60, 0x33, 0xC0, 0x13, 0x80, 0x01, 0x00, 0x00, // 0x65
            0x00, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xFC, 0x3F, 0xFE, 0x3F, 0xC7, 0x00, 0xC3, 0x00, 0xC3, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x66
            0x00, 0x00, 0x80, 0x03, 0xC0, 0xC7, 0xE0, 0xCE, 0x60, 0xCC, 0x60, 0xCC, 0x60, 0xCC, 0x60, 0xCC, 0x60, 0xE6, 0xE0, 0x7F, 0xE0, 0x3F, 0x00, 0x00, // 0x67
            0x00, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0xC0, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0xE0, 0x00, 0xC0, 0x3F, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, // 0x68
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0x30, 0xEC, 0x3F, 0xEC, 0x3F, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x69
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xE0, 0x00, 0xC0, 0x60, 0xC0, 0xEC, 0xFF, 0xEC, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x6A
            0x00, 0x00, 0x00, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0x00, 0x03, 0x80, 0x07, 0xC0, 0x0F, 0xE0, 0x1C, 0x60, 0x38, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, // 0x6B
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x03, 0x30, 0xFF, 0x3F, 0xFF, 0x3F, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x6C
            0x00, 0x00, 0xE0, 0x3F, 0xC0, 0x3F, 0xE0, 0x00, 0xE0, 0x00, 0xC0, 0x3F, 0xC0, 0x3F, 0xE0, 0x00, 0xE0, 0x00, 0xC0, 0x3F, 0x80, 0x3F, 0x00, 0x00, // 0x6D
            0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0xE0, 0x3F, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0xE0, 0x00, 0xC0, 0x3F, 0x80, 0x3F, 0x00, 0x00, // 0x6E
            0x00, 0x00, 0x80, 0x0F, 0xC0, 0x1F, 0xE0, 0x38, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0xE0, 0x38, 0xC0, 0x1F, 0x80, 0x0F, 0x00, 0x00, // 0x6F
            0x00, 0x00, 0xE0, 0xFF, 0xE0, 0xFF, 0x60, 0x0C, 0x60, 0x18, 0x60, 0x18, 0x60, 0x18, 0x60, 0x18, 0xE0, 0x1C, 0xC0, 0x0F, 0x80, 0x07, 0x00, 0x00, // 0x70
            0x00, 0x00, 0x80, 0x07, 0xC0, 0x0F, 0xE0, 0x1C, 0x60, 0x18, 0x60, 0x18, 0x60, 0x18, 0x60, 0x18, 0x60, 0x0C, 0xE0, 0xFF, 0xE0, 0xFF, 0x00, 0x00, // 0x71
            0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0xE0, 0x3F, 0xC0, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0xE0, 0x00, 0xC0, 0x00, 0x00, 0x00, // 0x72
            0x00, 0x00, 0xC0, 0x11, 0xE0, 0x33, 0x60, 0x33, 0x60, 0x33, 0x60, 0x33, 0x60, 0x33, 0x60, 0x3F, 0x40, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x73
            0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0xFE, 0x1F, 0xFE, 0x3F, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x74
            0x00, 0x00, 0xE0, 0x0F, 0xE0, 0x1F, 0x00, 0x38, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x18, 0xE0, 0x3F, 0xE0, 0x3F, 0x00, 0x00, // 0x75
            0x00, 0x00, 0x60, 0x00, 0xE0, 0x01, 0x80, 0x07, 0x00, 0x1E, 0x00, 0x38, 0x00, 0x38, 0x00, 0x1E, 0x80, 0x07, 0xE0, 0x01, 0x60, 0x00, 0x00, 0x00, // 0x76
            0x00, 0x00, 0xE0, 0x07, 0xE0, 0x1F, 0x00, 0x38, 0x00, 0x1C, 0xE0, 0x0F, 0xE0, 0x0F, 0x00, 0x1C, 0x00, 0x38, 0xE0, 0x1F, 0xE0, 0x07, 0x00, 0x00, // 0x77
            0x00, 0x00, 0x60, 0x30, 0xE0, 0x38, 0xC0, 0x1D, 0x80, 0x0F, 0x00, 0x07, 0x80, 0x0F, 0xC0, 0x1D, 0xE0, 0x38, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, // 0x78
            0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xE0, 0x81, 0x80, 0xE7, 0x00, 0x7E, 0x00, 0x1E, 0x80, 0x07, 0xE0, 0x01, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x79
            0x00, 0x00, 0x60, 0x30, 0x60, 0x38, 0x60, 0x3C, 0x60, 0x36, 0x60, 0x33, 0xE0, 0x31, 0xE0, 0x30, 0x60, 0x30, 0x20, 0x30, 0x00, 0x00, 0x00, 0x00, // 0x7A
            0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xC0, 0x01, 0xFC, 0x1F, 0x7E, 0x3F, 0x07, 0x70, 0x03, 0x60, 0x03, 0x60, 0x03, 0x60, 0x00, 0x00, 0x00, 0x00, // 0x7B
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x3F, 0xBF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x7C
            0x00, 0x00, 0x00, 0x00, 0x03, 0x60, 0x03, 0x60, 0x03, 0x60, 0x07, 0x70, 0x7E, 0x3F, 0xFC, 0x1F, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x7D
            0x00, 0x00, 0x10, 0x00, 0x18, 0x00, 0x0C, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x18, 0x00, 0x10, 0x00, 0x18, 0x00, 0x0C, 0x00, 0x04, 0x00, 0x00, 0x00, // 0x7E
            0x00, 0x00, 0x00, 0x0F, 0x80, 0x0F, 0xC0, 0x0C, 0x60, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x60, 0x0C, 0xC0, 0x0C, 0x80, 0x0F, 0x00, 0x0F, 0x00, 0x00, // 0x7F
            0x00, 0x00, 0xF0, 0x01, 0xFC, 0x07, 0x0E, 0xCE, 0x07, 0xDC, 0x03, 0xF8, 0x03, 0xF8, 0x03, 0x18, 0x07, 0x1C, 0x1E, 0x0E, 0x1C, 0x06, 0x00, 0x00, // 0x80
            0x00, 0x00, 0xE0, 0x0F, 0xE0, 0x1F, 0x0C, 0x38, 0x0C, 0x30, 0x00, 0x30, 0x00, 0x30, 0x0C, 0x30, 0x0C, 0x18, 0xE0, 0x3F, 0xE0, 0x3F, 0x00, 0x00, // 0x81
            0x00, 0x00, 0x80, 0x0F, 0xC0, 0x1F, 0xE0, 0x3B, 0x60, 0x33, 0x68, 0x33, 0x6C, 0x33, 0x66, 0x33, 0x62, 0x33, 0xC0, 0x13, 0x80, 0x03, 0x00, 0x00, // 0x82
            0x00, 0x00, 0x00, 0x1C, 0x40, 0x3E, 0x68, 0x33, 0x6C, 0x33, 0x66, 0x33, 0x66, 0x33, 0x6C, 0x33, 0x68, 0x33, 0xE0, 0x3F, 0xC0, 0x3F, 0x00, 0x00, // 0x83
            0x00, 0x00, 0x00, 0x1C, 0x40, 0x3E, 0x6C, 0x33, 0x6C, 0x33, 0x60, 0x33, 0x60, 0x33, 0x6C, 0x33, 0x6C, 0x33, 0xE0, 0x3F, 0xC0, 0x3F, 0x00, 0x00, // 0x84
            0x00, 0x00, 0x00, 0x1C, 0x40, 0x3E, 0x60, 0x33, 0x62, 0x33, 0x66, 0x33, 0x6C, 0x33, 0x68, 0x33, 0x60, 0x33, 0xE0, 0x3F, 0xC0, 0x3F, 0x00, 0x00, // 0x85
            0x00, 0x00, 0x00, 0x1C, 0x40, 0x3E, 0x60, 0x33, 0x64, 0x33, 0x6A, 0x33, 0x6A, 0x33, 0x64, 0x33, 0x60, 0x33, 0xE0, 0x3F, 0xC0, 0x3F, 0x00, 0x00, // 0x86
            0x00, 0x00, 0x80, 0x0F, 0xC0, 0x1F, 0xE0, 0xB8, 0x60, 0xB0, 0x60, 0xF0, 0x60, 0xF0, 0x60, 0x30, 0xE0, 0x38, 0xC0, 0x18, 0x80, 0x08, 0x00, 0x00, // 0x87
            0x00, 0x00, 0x80, 0x0F, 0xC0, 0x1F, 0xE8, 0x33, 0x6C, 0x33, 0x66, 0x33, 0x66, 0x33, 0x6C, 0x33, 0x68, 0x33, 0xC0, 0x13, 0x80, 0x03, 0x00, 0x00, // 0x88
            0x00, 0x00, 0x80, 0x0F, 0xC0, 0x1F, 0xEC, 0x33, 0x6C, 0x33, 0x60, 0x33, 0x60, 0x33, 0x6C, 0x33, 0x6C, 0x33, 0xC0, 0x13, 0x80, 0x03, 0x00, 0x00, // 0x89
            0x00, 0x00, 0x80, 0x0F, 0xC0, 0x1F, 0xE0, 0x33, 0x62, 0x33, 0x66, 0x33, 0x6C, 0x33, 0x68, 0x33, 0x60, 0x33, 0xC0, 0x13, 0x80, 0x03, 0x00, 0x00, // 0x8A
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x30, 0x6C, 0x30, 0xE0, 0x3F, 0xEC, 0x3F, 0x0C, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x8B
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x30, 0x6C, 0x30, 0xE6, 0x3F, 0xE6, 0x3F, 0x0C, 0x30, 0x08, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x8C
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x62, 0x30, 0xE6, 0x3F, 0xEC, 0x3F, 0x08, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x8D
            0x00, 0x00, 0x00, 0x38, 0x00, 0x3E, 0x83, 0x0F, 0xE3, 0x0D, 0x78, 0x0C, 0x78, 0x0C, 0xE3, 0x0D, 0x83, 0x0F, 0x00, 0x3E, 0x00, 0x38, 0x00, 0x00, // 0x8E
            0x00, 0x00, 0x00, 0x38, 0x00, 0x3E, 0x80, 0x0F, 0xE2, 0x0D, 0x75, 0x0C, 0x75, 0x0C, 0xE2, 0x0D, 0x80, 0x0F, 0x00, 0x3E, 0x00, 0x38, 0x00, 0x00, // 0x8F
            0x00, 0x00, 0xF8, 0x3F, 0xF8, 0x3F, 0x98, 0x31, 0x98, 0x31, 0x9C, 0x31, 0x9E, 0x31, 0x9B, 0x31, 0x99, 0x31, 0x18, 0x30, 0x18, 0x30, 0x00, 0x00, // 0x90
            0x00, 0x00, 0x80, 0x1C, 0xC0, 0x3E, 0x40, 0x22, 0x40, 0x22, 0xC0, 0x1F, 0x80, 0x3F, 0x40, 0x22, 0x40, 0x22, 0xC0, 0x33, 0x80, 0x11, 0x00, 0x00, // 0x91
            0x00, 0x00, 0x00, 0x3C, 0x80, 0x3F, 0xF0, 0x07, 0x7C, 0x06, 0x1F, 0x06, 0xFF, 0x3F, 0xFF, 0x3F, 0xC3, 0x30, 0xC3, 0x30, 0x03, 0x30, 0x00, 0x00, // 0x92
            0x00, 0x00, 0x80, 0x0F, 0xC0, 0x1F, 0xE8, 0x38, 0x6C, 0x30, 0x66, 0x30, 0x66, 0x30, 0x6C, 0x30, 0xE8, 0x38, 0xC0, 0x1F, 0x80, 0x0F, 0x00, 0x00, // 0x93
            0x00, 0x00, 0x80, 0x0F, 0xC0, 0x1F, 0xEC, 0x38, 0x6C, 0x30, 0x60, 0x30, 0x60, 0x30, 0x6C, 0x30, 0xEC, 0x38, 0xC0, 0x1F, 0x80, 0x0F, 0x00, 0x00, // 0x94
            0x00, 0x00, 0x80, 0x0F, 0xC0, 0x1F, 0xE0, 0x38, 0x62, 0x30, 0x66, 0x30, 0x6C, 0x30, 0x68, 0x30, 0xE0, 0x38, 0xC0, 0x1F, 0x80, 0x0F, 0x00, 0x00, // 0x95
            0x00, 0x00, 0xE0, 0x0F, 0xE0, 0x1F, 0x08, 0x38, 0x0C, 0x30, 0x06, 0x30, 0x06, 0x30, 0x0C, 0x30, 0x08, 0x18, 0xE0, 0x3F, 0xE0, 0x3F, 0x00, 0x00, // 0x96
            0x00, 0x00, 0xE0, 0x0F, 0xE0, 0x1F, 0x00, 0x38, 0x02, 0x30, 0x06, 0x30, 0x0C, 0x30, 0x08, 0x30, 0x00, 0x18, 0xE0, 0x3F, 0xE0, 0x3F, 0x00, 0x00, // 0x97
            0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xEC, 0x81, 0x8C, 0xE7, 0x00, 0x7E, 0x00, 0x1E, 0x8C, 0x07, 0xEC, 0x01, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x98
            0x00, 0x00, 0xE0, 0x0F, 0xF0, 0x1F, 0x3B, 0x38, 0x1B, 0x30, 0x18, 0x30, 0x18, 0x30, 0x1B, 0x30, 0x3B, 0x38, 0xF0, 0x1F, 0xE0, 0x0F, 0x00, 0x00, // 0x99
            0x00, 0x00, 0xE0, 0x0F, 0xE0, 0x1F, 0x0C, 0x38, 0x0C, 0x30, 0x00, 0x30, 0x00, 0x30, 0x0C, 0x30, 0x0C, 0x18, 0xE0, 0x3F, 0xE0, 0x3F, 0x00, 0x00, // 0x9A
            0x00, 0x00, 0x80, 0x2F, 0xC0, 0x3F, 0xE0, 0x18, 0x60, 0x3C, 0x60, 0x36, 0x60, 0x33, 0xE0, 0x31, 0xC0, 0x38, 0xE0, 0x1F, 0xA0, 0x0F, 0x00, 0x00, // 0x9B
            0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x80, 0x1C, 0xF8, 0x1F, 0xFC, 0x0B, 0x8C, 0x18, 0x8C, 0x18, 0x1C, 0x18, 0x18, 0x18, 0x00, 0x08, 0x00, 0x00, // 0x9C
            0x00, 0x00, 0xF0, 0x2F, 0xF8, 0x3F, 0x1C, 0x18, 0x0C, 0x3E, 0x8C, 0x37, 0xEC, 0x31, 0x7C, 0x30, 0x18, 0x38, 0xFC, 0x1F, 0xF4, 0x0F, 0x00, 0x00, // 0x9D
            0x00, 0x00, 0x00, 0x00, 0x10, 0x04, 0x30, 0x06, 0x60, 0x03, 0xC0, 0x01, 0xC0, 0x01, 0x60, 0x03, 0x30, 0x06, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00, // 0x9E
            0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x80, 0x70, 0x80, 0x60, 0xFE, 0x7F, 0xFF, 0x3F, 0x83, 0x00, 0x87, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x9F
            0x00, 0x00, 0x00, 0x1C, 0x40, 0x3E, 0x60, 0x33, 0x68, 0x33, 0x6C, 0x33, 0x66, 0x33, 0x62, 0x33, 0x60, 0x33, 0xE0, 0x3F, 0xC0, 0x3F, 0x00, 0x00, // 0xA0
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x68, 0x30, 0xEC, 0x3F, 0xE6, 0x3F, 0x02, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xA1
            0x00, 0x00, 0x80, 0x0F, 0xC0, 0x1F, 0xE0, 0x38, 0x68, 0x30, 0x6C, 0x30, 0x66, 0x30, 0x62, 0x30, 0xE0, 0x38, 0xC0, 0x1F, 0x80, 0x0F, 0x00, 0x00, // 0xA2
            0x00, 0x00, 0xE0, 0x0F, 0xE0, 0x1F, 0x00, 0x38, 0x08, 0x30, 0x0C, 0x30, 0x06, 0x30, 0x02, 0x30, 0x00, 0x18, 0xE0, 0x3F, 0xE0, 0x3F, 0x00, 0x00, // 0xA3
            0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0xE8, 0x3F, 0x6C, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x68, 0x00, 0xEC, 0x00, 0xC4, 0x3F, 0x80, 0x3F, 0x00, 0x00, // 0xA4
            0x00, 0x00, 0xF8, 0x3F, 0xF8, 0x3F, 0x72, 0x00, 0xE3, 0x00, 0xC1, 0x01, 0x83, 0x03, 0x02, 0x07, 0x03, 0x0E, 0xF9, 0x3F, 0xF8, 0x3F, 0x00, 0x00, // 0xA5
            0x00, 0x00, 0x70, 0x00, 0xFA, 0x06, 0xDB, 0x06, 0xDB, 0x06, 0xDB, 0x06, 0xDB, 0x06, 0xDB, 0x06, 0xDB, 0x06, 0xFF, 0x06, 0xFE, 0x00, 0x00, 0x00, // 0xA6
            0x00, 0x00, 0x3C, 0x00, 0x7E, 0x06, 0xE7, 0x06, 0xC3, 0x06, 0xC3, 0x06, 0xC3, 0x06, 0xC3, 0x06, 0xE7, 0x06, 0x7E, 0x06, 0x3C, 0x00, 0x00, 0x00, // 0xA7
            0x00, 0x00, 0x00, 0x0E, 0x00, 0x1F, 0x80, 0x3B, 0xC0, 0x31, 0xFB, 0x30, 0x7B, 0x30, 0x00, 0x30, 0x00, 0x38, 0x00, 0x1E, 0x00, 0x0E, 0x00, 0x00, // 0xA8
            0x00, 0x00, 0xF0, 0x07, 0xF8, 0x0F, 0x1C, 0x1C, 0xEC, 0x1B, 0xEC, 0x1B, 0xAC, 0x18, 0xEC, 0x1B, 0x4C, 0x1B, 0x1C, 0x1C, 0xF8, 0x0F, 0xF0, 0x07, // 0xA9
            0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0xF8, 0x03, 0xF8, 0x03, 0x00, 0x00, // 0xAA
            0x00, 0x00, 0x48, 0x00, 0x7C, 0x04, 0x7C, 0x06, 0x40, 0x03, 0x80, 0x01, 0xC0, 0x00, 0x60, 0x19, 0x30, 0x1D, 0x10, 0x17, 0x00, 0x12, 0x00, 0x00, // 0xAB
            0x00, 0x00, 0x48, 0x00, 0x7C, 0x04, 0x7C, 0x06, 0x40, 0x03, 0x80, 0x01, 0xC0, 0x06, 0x60, 0x07, 0x30, 0x04, 0x10, 0x1F, 0x00, 0x1F, 0x00, 0x00, // 0xAC
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0F, 0xF3, 0x3F, 0xF3, 0x3F, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xAD
            0x00, 0x00, 0x80, 0x00, 0xC0, 0x01, 0x60, 0x03, 0x20, 0x02, 0x00, 0x00, 0x80, 0x00, 0xC0, 0x01, 0x60, 0x03, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, // 0xAE
            0x00, 0x00, 0x20, 0x02, 0x60, 0x03, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x20, 0x02, 0x60, 0x03, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xAF
            0x55, 0x55, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00, // 0xB0
            0xAA, 0xAA, 0x55, 0x55, 0xAA, 0xAA, 0x55, 0x55, 0xAA, 0xAA, 0x55, 0x55, 0xAA, 0xAA, 0x55, 0x55, 0xAA, 0xAA, 0x55, 0x55, 0xAA, 0xAA, 0x55, 0x55, // 0xB1
            0xAA, 0xAA, 0xFF, 0xFF, 0x55, 0x55, 0xFF, 0xFF, 0xAA, 0xAA, 0xFF, 0xFF, 0x55, 0x55, 0xFF, 0xFF, 0xAA, 0xAA, 0xFF, 0xFF, 0x55, 0x55, 0xFF, 0xFF, // 0xB2
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xB3
            0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xB4
            0x00, 0x00, 0x00, 0x38, 0x00, 0x3E, 0x80, 0x0F, 0xE4, 0x0D, 0x7E, 0x0C, 0x7B, 0x0C, 0xE1, 0x0D, 0x80, 0x0F, 0x00, 0x3E, 0x00, 0x38, 0x00, 0x00, // 0xB5
            0x00, 0x00, 0x00, 0x38, 0x00, 0x3E, 0x84, 0x0F, 0xE6, 0x0D, 0x7B, 0x0C, 0x7B, 0x0C, 0xE6, 0x0D, 0x84, 0x0F, 0x00, 0x3E, 0x00, 0x38, 0x00, 0x00, // 0xB6
            0x00, 0x00, 0x00, 0x38, 0x00, 0x3E, 0x80, 0x0F, 0xE1, 0x0D, 0x7B, 0x0C, 0x7E, 0x0C, 0xE4, 0x0D, 0x80, 0x0F, 0x00, 0x3E, 0x00, 0x38, 0x00, 0x00, // 0xB7
            0x00, 0x00, 0xF0, 0x07, 0xF8, 0x0F, 0x1C, 0x1C, 0xCC, 0x19, 0xEC, 0x1B, 0x2C, 0x1A, 0x6C, 0x1B, 0x4C, 0x19, 0x1C, 0x1C, 0xF8, 0x0F, 0xF0, 0x07, // 0xB8
            0xC0, 0x06, 0xC0, 0x06, 0xFF, 0xFE, 0xFF, 0xFE, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xB9
            0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xBA
            0xC0, 0x06, 0xC0, 0x06, 0xC0, 0xFE, 0xC0, 0xFE, 0xC0, 0x00, 0xC0, 0xFF, 0xC0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xBB
            0xC0, 0x06, 0xC0, 0x06, 0xFF, 0x06, 0xFF, 0x06, 0x00, 0x06, 0xFF, 0x07, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xBC
            0x00, 0x00, 0x00, 0x00, 0xE0, 0x03, 0xF0, 0x07, 0x38, 0x0E, 0xFE, 0x3F, 0xFE, 0x3F, 0x18, 0x0C, 0x38, 0x0E, 0x30, 0x06, 0x00, 0x00, 0x00, 0x00, // 0xBD
            0x00, 0x00, 0x03, 0x00, 0x0F, 0x0A, 0x3C, 0x0A, 0xF0, 0x0A, 0xC0, 0x3F, 0xC0, 0x3F, 0xF0, 0x0A, 0x3C, 0x0A, 0x0F, 0x0A, 0x03, 0x00, 0x00, 0x00, // 0xBE
            0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0xFF, 0x80, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xBF
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x01, 0xFF, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, // 0xC0
            0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xFF, 0x01, 0xFF, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, // 0xC1
            0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0xFF, 0x80, 0xFF, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, // 0xC2
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, // 0xC3
            0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, // 0xC4
            0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, // 0xC5
            0x00, 0x00, 0x00, 0x1C, 0x40, 0x3E, 0x68, 0x33, 0x6C, 0x33, 0x64, 0x33, 0x6C, 0x33, 0x68, 0x33, 0x6C, 0x33, 0xE4, 0x3F, 0xC0, 0x3F, 0x00, 0x00, // 0xC6
            0x00, 0x00, 0x00, 0x38, 0x00, 0x3E, 0x82, 0x0F, 0xE3, 0x0D, 0x79, 0x0C, 0x7B, 0x0C, 0xE2, 0x0D, 0x83, 0x0F, 0x01, 0x3E, 0x00, 0x38, 0x00, 0x00, // 0xC7
            0x00, 0x00, 0x00, 0x00, 0xFF, 0x07, 0xFF, 0x07, 0x00, 0x06, 0xFF, 0x06, 0xFF, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, // 0xC8
            0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xC0, 0xFF, 0xC0, 0x00, 0xC0, 0xFE, 0xC0, 0xFE, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, // 0xC9
            0xC0, 0x06, 0xC0, 0x06, 0xFF, 0x06, 0xFF, 0x06, 0x00, 0x06, 0xFF, 0x06, 0xFF, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, // 0xCA
            0xC0, 0x06, 0xC0, 0x06, 0xC0, 0xFE, 0xC0, 0xFE, 0xC0, 0x00, 0xC0, 0xFE, 0xC0, 0xFE, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, // 0xCB
            0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFE, 0xFF, 0xFE, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, // 0xCC
            0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, // 0xCD
            0xC0, 0x06, 0xC0, 0x06, 0xFF, 0xFE, 0xFF, 0xFE, 0x00, 0x00, 0xFF, 0xFE, 0xFF, 0xFE, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, // 0xCE
            0x00, 0x00, 0xF6, 0x1B, 0xFE, 0x1F, 0x18, 0x06, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x18, 0x06, 0xFE, 0x1F, 0xF6, 0x1B, 0x00, 0x00, // 0xCF
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x1C, 0xFC, 0x3E, 0xCC, 0x33, 0x8C, 0x33, 0x0C, 0x3F, 0x18, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xD0
            0x00, 0x00, 0xC0, 0x00, 0xFF, 0x3F, 0xFF, 0x3F, 0xC3, 0x30, 0x03, 0x30, 0x03, 0x30, 0x07, 0x38, 0x0E, 0x1C, 0xFC, 0x0F, 0xF0, 0x03, 0x00, 0x00, // 0xD1
            0x00, 0x00, 0xF8, 0x3F, 0xF8, 0x3F, 0x9C, 0x31, 0x9E, 0x31, 0x9B, 0x31, 0x9B, 0x31, 0x9E, 0x31, 0x9C, 0x31, 0x18, 0x30, 0x18, 0x30, 0x00, 0x00, // 0xD2
            0x00, 0x00, 0xF8, 0x3F, 0xF8, 0x3F, 0x9B, 0x31, 0x9B, 0x31, 0x98, 0x31, 0x98, 0x31, 0x9B, 0x31, 0x9B, 0x31, 0x18, 0x30, 0x18, 0x30, 0x00, 0x00, // 0xD3
            0x00, 0x00, 0xF8, 0x3F, 0xF8, 0x3F, 0x99, 0x31, 0x9B, 0x31, 0x9E, 0x31, 0x9C, 0x31, 0x98, 0x31, 0x98, 0x31, 0x18, 0x30, 0x18, 0x30, 0x00, 0x00, // 0xD4
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xD5
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x18, 0x30, 0xFC, 0x3F, 0xFE, 0x3F, 0x1B, 0x30, 0x19, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xD6
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x30, 0x1E, 0x30, 0xFB, 0x3F, 0xFB, 0x3F, 0x1E, 0x30, 0x1C, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xD7
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x30, 0x1B, 0x30, 0xF8, 0x3F, 0xF8, 0x3F, 0x1B, 0x30, 0x1B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xD8
            0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xFF, 0x01, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xD9
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x80, 0xFF, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, // 0xDA
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 0xDB
            0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, // 0xDC
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x3F, 0xBF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xDD
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x30, 0x1B, 0x30, 0xFE, 0x3F, 0xFC, 0x3F, 0x18, 0x30, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xDE
            0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, // 0xDF
            0x00, 0x00, 0xE0, 0x0F, 0xF0, 0x1F, 0x38, 0x38, 0x18, 0x30, 0x1C, 0x30, 0x1E, 0x30, 0x1B, 0x30, 0x39, 0x38, 0xF0, 0x1F, 0xE0, 0x0F, 0x00, 0x00, // 0xE0
            0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xE0, 0xFF, 0x30, 0x21, 0x10, 0x21, 0x10, 0x21, 0x30, 0x33, 0xE0, 0x3F, 0xC0, 0x1E, 0x00, 0x00, 0x00, 0x00, // 0xE1
            0x00, 0x00, 0xE0, 0x0F, 0xF0, 0x1F, 0x3C, 0x38, 0x1E, 0x30, 0x1B, 0x30, 0x1B, 0x30, 0x1E, 0x30, 0x3C, 0x38, 0xF0, 0x1F, 0xE0, 0x0F, 0x00, 0x00, // 0xE2
            0x00, 0x00, 0xE0, 0x0F, 0xF0, 0x1F, 0x39, 0x38, 0x1B, 0x30, 0x1E, 0x30, 0x1C, 0x30, 0x18, 0x30, 0x38, 0x38, 0xF0, 0x1F, 0xE0, 0x0F, 0x00, 0x00, // 0xE3
            0x00, 0x00, 0x80, 0x0F, 0xC8, 0x1F, 0xEC, 0x38, 0x64, 0x30, 0x6C, 0x30, 0x68, 0x30, 0x6C, 0x30, 0xE4, 0x38, 0xC0, 0x1F, 0x80, 0x0F, 0x00, 0x00, // 0xE4
            0x00, 0x00, 0xE0, 0x0F, 0xF0, 0x1F, 0x3A, 0x38, 0x1B, 0x30, 0x19, 0x30, 0x1B, 0x30, 0x1A, 0x30, 0x3B, 0x38, 0xF1, 0x1F, 0xE0, 0x0F, 0x00, 0x00, // 0xE5
            0x00, 0x00, 0xF0, 0xFF, 0xF0, 0xFF, 0x00, 0x0E, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x06, 0xF0, 0x0F, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, // 0xE6
            0x00, 0x00, 0x00, 0x00, 0x0C, 0x30, 0xFC, 0x3F, 0xFC, 0x3F, 0x6C, 0x36, 0x60, 0x06, 0x60, 0x06, 0xE0, 0x07, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, // 0xE7
            0x00, 0x00, 0x00, 0x00, 0x03, 0x30, 0xFF, 0x3F, 0xFF, 0x3F, 0x1B, 0x36, 0x18, 0x06, 0x18, 0x06, 0xF8, 0x07, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, // 0xE8
            0x00, 0x00, 0xF8, 0x07, 0xF8, 0x1F, 0x00, 0x38, 0x00, 0x30, 0x04, 0x30, 0x06, 0x30, 0x03, 0x30, 0x01, 0x38, 0xF8, 0x1F, 0xF8, 0x07, 0x00, 0x00, // 0xE9
            0x00, 0x00, 0xF8, 0x07, 0xF8, 0x1F, 0x04, 0x38, 0x06, 0x30, 0x03, 0x30, 0x03, 0x30, 0x06, 0x30, 0x04, 0x38, 0xF8, 0x1F, 0xF8, 0x07, 0x00, 0x00, // 0xEA
            0x00, 0x00, 0xF8, 0x07, 0xF8, 0x1F, 0x01, 0x38, 0x03, 0x30, 0x06, 0x30, 0x04, 0x30, 0x00, 0x30, 0x00, 0x38, 0xF8, 0x1F, 0xF8, 0x07, 0x00, 0x00, // 0xEB
            0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xE0, 0x81, 0x80, 0xE7, 0x10, 0x7E, 0x18, 0x1E, 0x8C, 0x07, 0xE4, 0x01, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xEC
            0x00, 0x00, 0x08, 0x00, 0x18, 0x00, 0x30, 0x00, 0x60, 0x00, 0xC4, 0x3F, 0xC6, 0x3F, 0x63, 0x00, 0x31, 0x00, 0x18, 0x00, 0x08, 0x00, 0x00, 0x00, // 0xED
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xEE
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x06, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xEF
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xF0
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x18, 0xC0, 0x18, 0xF0, 0x1B, 0xF0, 0x1B, 0xC0, 0x18, 0xC0, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xF1
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xF2
            0x00, 0x00, 0x44, 0x00, 0x54, 0x04, 0x7C, 0x06, 0x28, 0x03, 0x80, 0x01, 0xC0, 0x06, 0x60, 0x07, 0x30, 0x04, 0x10, 0x1F, 0x00, 0x1F, 0x00, 0x00, // 0xF3
            0x00, 0x00, 0x38, 0x00, 0x7C, 0x00, 0xC6, 0x00, 0x82, 0x00, 0xFE, 0x3F, 0xFE, 0x3F, 0x02, 0x00, 0xFE, 0x3F, 0xFE, 0x3F, 0x02, 0x00, 0x00, 0x00, // 0xF4
            0x00, 0x00, 0x00, 0x00, 0xDC, 0x08, 0xFE, 0x19, 0x22, 0x11, 0x22, 0x11, 0x22, 0x11, 0x22, 0x11, 0xE6, 0x1F, 0xC4, 0x0E, 0x00, 0x00, 0x00, 0x00, // 0xF5
            0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xB0, 0x0D, 0xB0, 0x0D, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, // 0xF6
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x80, 0x00, 0x80, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xF7
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x3F, 0x00, 0x33, 0x00, 0x33, 0x00, 0x3F, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xF8
            0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0xC0, 0x03, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0xC0, 0x03, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, // 0xF9
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0xC0, 0x03, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xFA
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xFB
            0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x15, 0x00, 0x15, 0x00, 0x1F, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xFC
            0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x1D, 0x00, 0x15, 0x00, 0x17, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xFD
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x03, 0xF0, 0x03, 0xF0, 0x03, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xFE
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xFF
            0x0C, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // 0xFF
        ];

        var Font3x6 = [
            0x00, 0x00, 0x00, /* Space */
            0x00, 0x5C, 0x00, /* ! */
            0x0C, 0x00, 0x0C, /* " */
            0x7C, 0x28, 0x7C, /* # */
            0x7C, 0x44, 0x7C, /* 0x */
            0x24, 0x10, 0x48, /* % */
            0x28, 0x54, 0x08, /* & */
            0x00, 0x0C, 0x00, /* ' */
            0x38, 0x44, 0x00, /* ( */
            0x44, 0x38, 0x00, /* ) */
            0x20, 0x10, 0x08, /* // */
            0x10, 0x38, 0x10, /* + */
            0x80, 0x40, 0x00, /* , */
            0x10, 0x10, 0x10, /* - */
            0x00, 0x40, 0x00, /* . */
            0x20, 0x10, 0x08, /* / */
            0x38, 0x44, 0x38, /* 0 */
            0x00, 0x7C, 0x00, /* 1 */
            0x64, 0x54, 0x48, /* 2 */
            0x44, 0x54, 0x28, /* 3 */
            0x1C, 0x10, 0x7C, /* 4 */
            0x4C, 0x54, 0x24, /* 5 */
            0x38, 0x54, 0x20, /* 6 */
            0x04, 0x74, 0x0C, /* 7 */
            0x28, 0x54, 0x28, /* 8 */
            0x08, 0x54, 0x38, /* 9 */
            0x00, 0x50, 0x00, /* : */
            0x80, 0x50, 0x00, /* ; */
            0x10, 0x28, 0x44, /* < */
            0x28, 0x28, 0x28, /* = */
            0x44, 0x28, 0x10, /* > */
            0x04, 0x54, 0x08, /* ? */
            0x38, 0x4C, 0x5C, /* @ */
            0x78, 0x14, 0x78, /* A */
            0x7C, 0x54, 0x28, /* B */
            0x38, 0x44, 0x44, /* C */
            0x7C, 0x44, 0x38, /* D */
            0x7C, 0x54, 0x44, /* E */
            0x7C, 0x14, 0x04, /* F */
            0x38, 0x44, 0x34, /* G */
            0x7C, 0x10, 0x7C, /* H */
            0x00, 0x7C, 0x00, /* I */
            0x20, 0x40, 0x3C, /* J */
            0x7C, 0x10, 0x6C, /* K */
            0x7C, 0x40, 0x40, /* L */
            0x7C, 0x08, 0x7C, /* M */
            0x7C, 0x04, 0x7C, /* N */
            0x7C, 0x44, 0x7C, /* O */
            0x7C, 0x14, 0x08, /* P */
            0x38, 0x44, 0x78, /* Q */
            0x7C, 0x14, 0x68, /* R */
            0x48, 0x54, 0x24, /* S */
            0x04, 0x7C, 0x04, /* T */
            0x7C, 0x40, 0x7C, /* U */
            0x3C, 0x40, 0x3C, /* V */
            0x7C, 0x20, 0x7C, /* W */
            0x6C, 0x10, 0x6C, /* X */
            0x1C, 0x60, 0x1C, /* Y */
            0x64, 0x54, 0x4C, /* Z */
            0x7C, 0x44, 0x00, /* [ */
            0x08, 0x10, 0x20, /* \ */
            0x44, 0x7C, 0x00, /* ] */
            0x08, 0x04, 0x08, /* ^ */
            0x80, 0x80, 0x80, /* _ */
            0x04, 0x08, 0x00  /* ` */
        ];


        /* System 5x8 */
        var Font5x8 = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* Space */
            0x00, 0x00, 0x00, 0xfd, 0x00, 0x00, /* ! */ // ?
            0x00, 0x78, 0x85, 0xA5, 0xA5, 0x68, /* " */ // ?
            0x00, 0x3E, 0x41, 0xC1, 0x41, 0x22, /* # */ // �
            0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12, /* 0x */
            0x00, 0x23, 0x13, 0x08, 0x64, 0x62, /* % */
            0x00, 0x36, 0x49, 0x55, 0x22, 0x20, /* & */
            0x00, 0x00, 0x05, 0x03, 0x00, 0x00, /* ' */
            0x00, 0x00, 0x1c, 0x22, 0x41, 0x00, /* ( */
            0x00, 0x00, 0x41, 0x22, 0x1c, 0x00, /* ) */
            0x00, 0x14, 0x08, 0x3e, 0x08, 0x14, /* // */
            0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, /* + */
            0x00, 0x50, 0x30, 0x00, 0x00, 0x00, /* , */
            0x00, 0x08, 0x08, 0x08, 0x08, 0x08, /* - */
            0x00, 0x00, 0x60, 0x60, 0x00, 0x00, /* . */
            0x00, 0x20, 0x10, 0x08, 0x04, 0x02, /* / */
            0x00, 0x3e, 0x51, 0x49, 0x45, 0x3e, /* 0 */
            0x00, 0x00, 0x42, 0x7f, 0x40, 0x00, /* 1 */
            0x00, 0x42, 0x61, 0x51, 0x49, 0x46, /* 2 */
            0x00, 0x21, 0x41, 0x45, 0x4b, 0x31, /* 3 */
            0x00, 0x18, 0x14, 0x12, 0x7f, 0x10, /* 4 */
            0x00, 0x27, 0x45, 0x45, 0x45, 0x39, /* 5 */
            0x00, 0x3c, 0x4a, 0x49, 0x49, 0x30, /* 6 */
            0x00, 0x01, 0x71, 0x09, 0x05, 0x03, /* 7 */
            0x00, 0x36, 0x49, 0x49, 0x49, 0x36, /* 8 */
            0x00, 0x06, 0x49, 0x49, 0x29, 0x1e, /* 9 */
            0x00, 0x00, 0x36, 0x36, 0x00, 0x00, /* : */
            0x00, 0x00, 0x56, 0x36, 0x00, 0x00, /* ; */
            0x00, 0x08, 0x14, 0x22, 0x41, 0x00, /* < */
            0x00, 0x14, 0x14, 0x14, 0x14, 0x00, /* = */ //  0x14, 0x14, 0x14, 0x14, 0x14, /* = */
            0x00, 0x00, 0x41, 0x22, 0x14, 0x08, /* > */
            0x00, 0x02, 0x01, 0x51, 0x09, 0x06, /* ? */
            0x00, 0x3e, 0x41, 0x5d, 0x55, 0x1e, /* @ */
            0x00, 0x7e, 0x11, 0x11, 0x11, 0x7e, /* A */
            0x00, 0x7f, 0x49, 0x49, 0x49, 0x36, /* B */
            0x00, 0x3e, 0x41, 0x41, 0x41, 0x22, /* C */
            0x00, 0x7f, 0x41, 0x41, 0x22, 0x1c, /* D */
            0x00, 0x7f, 0x49, 0x49, 0x49, 0x41, /* E */
            0x00, 0x7f, 0x09, 0x09, 0x09, 0x01, /* F */
            0x00, 0x3e, 0x41, 0x49, 0x49, 0x7a, /* G */
            0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f, /* H */
            0x00, 0x00, 0x41, 0x7f, 0x41, 0x00, /* I */
            0x00, 0x20, 0x40, 0x41, 0x3f, 0x01, /* J */
            0x00, 0x7f, 0x08, 0x14, 0x22, 0x41, /* K */
            0x00, 0x7f, 0x40, 0x40, 0x40, 0x40, /* L */
            0x00, 0x7f, 0x02, 0x0c, 0x02, 0x7f, /* M */
            0x00, 0x7f, 0x04, 0x08, 0x10, 0x7f, /* N */
            0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e, /* O */
            0x00, 0x7f, 0x09, 0x09, 0x09, 0x06, /* P */
            0x00, 0x3e, 0x41, 0x51, 0x21, 0x5e, /* Q */
            0x00, 0x7f, 0x09, 0x19, 0x29, 0x46, /* R */
            0x00, 0x26, 0x49, 0x49, 0x49, 0x32, /* S */
            0x00, 0x01, 0x01, 0x7f, 0x01, 0x01, /* T */
            0x00, 0x3f, 0x40, 0x40, 0x40, 0x3f, /* U */
            0x00, 0x1f, 0x20, 0x40, 0x20, 0x1f, /* V */
            0x00, 0x3f, 0x40, 0x38, 0x40, 0x3f, /* W */
            0x00, 0x63, 0x14, 0x08, 0x14, 0x63, /* X */
            0x00, 0x07, 0x08, 0x70, 0x08, 0x07, /* Y */
            0x00, 0x61, 0x51, 0x49, 0x45, 0x43, /* Z */
            0x00, 0x78, 0x85, 0x84, 0x85, 0x78, /* [ */ // �
            0x00, 0x02, 0x04, 0x08, 0x10, 0x20, /* \ */
            0x00, 0x26, 0x49, 0xC9, 0x49, 0x32, /* ] */ // ?
            0x00, 0x7C, 0x81, 0x80, 0x81, 0x7C, /* ^ */ // �
            0x00, 0x40, 0x40, 0x40, 0x40, 0x40, /* _ */
            0x00, 0x00, 0x00, 0x03, 0x05, 0x00, /* ` */
            0x00, 0x20, 0x54, 0x54, 0x54, 0x78, /* a */
            0x00, 0x7F, 0x44, 0x44, 0x44, 0x38, /* b */
            0x00, 0x38, 0x44, 0x44, 0x44, 0x44, /* c */
            0x00, 0x38, 0x44, 0x44, 0x44, 0x7f, /* d */
            0x00, 0x38, 0x54, 0x54, 0x54, 0x18, /* e */
            0x00, 0x04, 0x04, 0x7e, 0x05, 0x05, /* f */
            0x00, 0x08, 0x54, 0x54, 0x54, 0x3c, /* g */
            0x00, 0x7f, 0x08, 0x04, 0x04, 0x78, /* h */
            0x00, 0x00, 0x44, 0x7d, 0x40, 0x00, /* i */
            0x00, 0x20, 0x40, 0x44, 0x3d, 0x00, /* j */
            0x00, 0x7f, 0x10, 0x28, 0x44, 0x00, /* k */
            0x00, 0x00, 0x41, 0x7f, 0x40, 0x00, /* l */
            0x00, 0x7c, 0x04, 0x7c, 0x04, 0x78, /* m */
            0x00, 0x7c, 0x08, 0x04, 0x04, 0x78, /* n */
            0x00, 0x38, 0x44, 0x44, 0x44, 0x38, /* o */
            0x00, 0x7c, 0x14, 0x14, 0x14, 0x08, /* p */
            0x00, 0x08, 0x14, 0x14, 0x14, 0x7c, /* q */
            0x00, 0x7c, 0x08, 0x04, 0x04, 0x00, /* r */
            0x00, 0x48, 0x54, 0x54, 0x54, 0x24, /* s */
            0x00, 0x04, 0x04, 0x3f, 0x44, 0x44, /* t */
            0x00, 0x3c, 0x40, 0x40, 0x20, 0x7c, /* u */
            0x00, 0x1c, 0x20, 0x40, 0x20, 0x1c, /* v */
            0x00, 0x3c, 0x40, 0x30, 0x40, 0x3c, /* w */
            0x00, 0x44, 0x28, 0x10, 0x28, 0x44, /* x */
            0x00, 0x0c, 0x50, 0x50, 0x50, 0x3c, /* y */
            0x00, 0x44, 0x64, 0x54, 0x4c, 0x44, /* z */
            0x00, 0x08, 0x36, 0x41, 0x41, 0x00, /* { */
            0x00, 0x00, 0x00, 0x77, 0x00, 0x00, /* | */
            0x00, 0x00, 0x41, 0x41, 0x36, 0x08, /* } */
            0x00, 0x08, 0x08, 0x2a, 0x1c, 0x08, /* <- */
            0x00, 0x08, 0x1c, 0x2a, 0x08, 0x08, /* -> */
            0x00, 0xff, 0xff, 0xff, 0xff, 0xff, /*  */
            0x00, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, // Custom =
            0x00, 0x00, 0x06, 0x09, 0x09, 0x06, // Custom derece
            0x7c, 0x86, 0xb5, 0xb5, 0x86, 0x7c, // Custom kilit
            0xfe, 0x82, 0x38, 0x10, 0x82, 0xD6, // fan1
            0x82, 0x10, 0x38, 0x82, 0xFE, 0x00, // fan2
            0x18, 0x18, 0x24, 0x42, 0xFF, 0x00, // buzzer
            0x28, 0x10, 0x28, 0x00, 0x00, 0x00, // buzzer
            0xFE, 0x82, 0x93, 0xBB, 0x92, 0x82, // battery1
            0x82, 0x82, 0x93, 0x93, 0x82, 0xFE,  // battery2
            0x18, 0xBC, 0xA4, 0xE4, 0x64, 0x34,     // thermistor
            0x3C, 0x2E, 0x27, 0x25, 0x3D, 0x18      // thermistor2
        ];


        var shift = 1;
        var pixel = 0;

        //let max = (a,b) => a>b ? a : b;


        let bit_set = (variable, b) => variable |= (1 << b);
        let bit_clear = (variable, b) => variable &= ~(1 << b);
        let bit_test = (data, bitno) => ((data >> bitno) & 0x01);

        let max = (a, b) => (((a) > (b)) ? (a) : (b));
        let min = (a, b) => (((a) < (b)) ? (a) : (b));

        var canvas = document.querySelector('#my-canvas');
        var context = canvas.getContext('2d');

        function drawBackround(x, y, color) {

            // to decrease smoothing for numbers with decimal part
            var roundedX = Math.round(x) * 3;
            var roundedY = Math.round(y) * 3;

            context.beginPath();
            context.fillStyle = color || '#000';

            context.fillRect(roundedX, roundedY, 1, 1);
            context.fillRect(roundedX + 1, roundedY, 1, 1);
            context.fillRect(roundedX + 2, roundedY, 1, 1);

            context.fillRect(roundedX, roundedY + 1, 1, 1);
            context.fillRect(roundedX + 1, roundedY + 1, 1, 1);
            context.fillRect(roundedX + 2, roundedY + 1, 1, 1);

            context.fillRect(roundedX, roundedY + 2, 1, 1);
            context.fillRect(roundedX + 1, roundedY + 2, 1, 1);
            context.fillRect(roundedX + 2, roundedY + 2, 1, 1);

            context.fill();
        }


        function drawPixel(x, y, color) {
            // to decrease smoothing for numbers with decimal part

            x = x + 6;
            y = y + 6;

            var roundedX = Math.round(x) * 3;
            var roundedY = Math.round(y) * 3;


            context.beginPath();
            context.fillStyle = color || '#000';

            context.fillRect(roundedX, roundedY, 1, 1);
            context.fillRect(roundedX + 1, roundedY, 1, 1);
            context.fillRect(roundedX + 2, roundedY, 1, 1);

            context.fillRect(roundedX, roundedY + 1, 1, 1);
            context.fillRect(roundedX + 1, roundedY + 1, 1, 1);
            context.fillRect(roundedX + 2, roundedY + 1, 1, 1);

            context.fillRect(roundedX, roundedY + 2, 1, 1);
            context.fillRect(roundedX + 1, roundedY + 2, 1, 1);
            context.fillRect(roundedX + 2, roundedY + 2, 1, 1);

            context.fill();
        }

        var colors = ['red', 'blue', 'orange', 'yellow', 'brown', 'green'];

        for (var i = 0; i < 128 + 6 + 6; i++) {
            for (var ii = 0; ii < 64 + 6 + 6; ii++) {
                drawBackround(i, ii, "#2F6EEB");
            }
        }

        for (var i = 0; i < 128; i++) {
            for (var ii = 0; ii < 64; ii++) {
                drawPixel(i, ii, "#1D58CE");
            }
        }

        function st7565_DrawPixel(x, y, color) {
            if ((x >= 128) || (y >= 64))
                return;
            if (color) {
                buffer[(128 * ~~(y / 8)) + x] |= (1 << (y % 8));
            } else {
                buffer[(128 * ~~(y / 8)) + x] &= ~(1 << (y % 8));
            }
        }

        function st7565_Refresh() {

        }

        function IsBitSet(num, ntbit) {
            if (((num >> ntbit) & 1) == 1) {
                return true;
            } else {
                return false;
            }
        }


        function st7565_DrawPixel(x, y, color) {
            if ((x >= 128) || (y >= 64))
                return;
            if (color) {
                buffer[(128 * ~~(y / 8)) + x] |= (1 << (y % 8));
            } else {
                buffer[(128 * ~~(y / 8)) + x] &= ~(1 << (y % 8));
            }
        }

        function st7565_DrawChar(letter, x, y, size, color) {

            var index = 0;
            if (letter > 127) {
                letter = letter;
            } else {
                letter = letter.charCodeAt(index);
            }

            if ((x >= 128) || (y >= 64))
                return;
            if (size == 0) {
                buffer[(128 * ~~(y / 8)) + x] = Font3x6[((letter - 32) * 3)];
                buffer[(128 * ~~(y / 8)) + ++x] = Font3x6[((letter - 32) * 3) + 1];
                buffer[(128 * ~~(y / 8)) + ++x] = Font3x6[((letter - 32) * 3) + 2];
            } else if (size == 1) {
                for (var i = 0; i < 6; i++) {
                    if (color == 0) {
                        buffer[(128 * (~~(y / 8))) + x++] = Font5x8[((letter - 32) * 6) + i];
                    } else {
                        buffer[(128 * (~~(y / 8))) + x++] = ~Font5x8[((letter - 32) * 6) + i];
                    }
                }
            } else if (size == 2) {
                for (var i = 0; i < 12; i++) {

                    buffer[(128 * (~~(y / 8))) + x] = Font12x16[(letter * 24) + i * 2];
                    buffer[(128 * (~~(y / 8) + 1)) + x] = Font12x16[(letter * 24) + (i * 2) + 1];
                    x++;
                }
            }
        }

        function st7565_DrawLine(x1, y1, x2, y2, color) {
            var cnt;

            var dy, dx, x, y;
            var addx, addy;
            var err;

            if (x1 == x2 || y1 == y2) {
                if (x1 == x2) {
                    for (cnt = min(y1, y2); cnt <= max(y1, y2); cnt++)
                        st7565_DrawPixel(x1, cnt, color);
                } else {
                    for (cnt = min(x1, x2); cnt <= max(x1, x2); cnt++)
                        st7565_DrawPixel(cnt, y1, color);
                }
            } else {
                dx = max(x1, x2) - min(x1, x2);
                dy = max(y1, y2) - min(y1, y2);

                x = x1;
                y = y1;

                if (x1 > x2)
                    addx = -1;
                else
                    addx = 1;

                if (y1 > y2)
                    addy = -1;
                else
                    addy = 1;

                if (dx >= dy) {
                    err = 2 * dy - dx;

                    for (cnt = 0; cnt <= dx; ++cnt) {
                        st7565_DrawPixel(x, y, color);

                        if (err < 0) {
                            err += 2 * dy;
                            x += addx;
                        } else {
                            err += 2 * dy - 2 * dx;
                            x += addx;
                            y += addy;
                        }
                    }
                } else {
                    err = 2 * dx - dy;

                    for (cnt = 0; cnt <= dy; ++cnt) {
                        st7565_DrawPixel(x, y, color);

                        if (err < 0) {
                            err += 2 * dx;
                            y += addy;
                        } else {
                            err += 2 * dx - 2 * dy;
                            x += addx;
                            y += addy;
                        }
                    }
                }
            }
        }

    function st7565_DrawSpecialChar(letter, x, y, size, color) {
        if ((x >= 128) || (y >= 64))
            return;

        var index = 0;


   //     letter = letter.charCodeAt(index);


        console.log(letter);

        var i = 0, k = 0;

        switch (size) {

            case 1:
                if (color == 1) {
                    st7565_DrawLine(x, y - 1, x + 5, y - 1, 1);
                    st7565_DrawLine(x, y + 7, x + 5, y + 7, 1);
                    st7565_DrawLine(x + 6, y - 1, x + 6, y + 7, 1);
                } else {
                    st7565_DrawLine(x, y - 1, x + 5, y - 1, 0);
                    st7565_DrawLine(x, y + 7, x + 5, y + 7, 0);
                    st7565_DrawLine(x + 6, y - 1, x + 6, y + 7, 0);
                }

                for (i = 0; i < 6; i++) {

                    if (color == 0) {

                        for (k = 0; k < 8; ++k) // Loop through the vertical pixels
                        {
                            if (bit_test(Font5x8[((letter - 32) * 6) + i], k)) {
                                st7565_DrawPixel(x, y + k, 1);
                            } else {
                                st7565_DrawPixel(x, y + k, 0);
                            }
                        }
                        x++;
                        //                    buffer[(64 * ((y / 8) + cs2)) + x++] = Font5x8[((letter - 32)*6) + i];
                    } else {

                        for (k = 0; k < 8; ++k) // Loop through the vertical pixels
                        {
                            if (bit_test(Font5x8[((letter - 32) * 6) + i], k)) {

                                st7565_DrawPixel(x, y + k, 0);
                            } else {
                                st7565_DrawPixel(x, y + k, 1);
                            }

                        }
                        x++;
                        //                    buffer[(64 * ((y / 8) + cs2)) + x++] = ~Font5x8[((letter - 32)*6) + i];
                    }
                }
                break;

            default:

                break;
        }
    }


        function st7565_DrawChar2(letter, x, y, size, color) {
            if ((x >= 128) || (y >= 64))
                return;

            var index = 0;

            if (typeof letter=="number") {
                
            }else {
                letter = letter.charCodeAt(index);
            }

               

      
            console.log(letter);  

            var i = 0, k = 0;

            switch (size) {
                case 0:

                    for (i = 0; i < 3; i++) {
                        if (color == 0) {

                            for (k = 0; k < 7; ++k) // Loop through the vertical pixels
                            {
                                if (bit_test(Font3x6[((letter - 32) * 3) + i], k)) {
                                    st7565_DrawPixel(x, y + k, 1);
                                } else {
                                    st7565_DrawPixel(x, y + k, 0);
                                }
                            }
                            x++;
                            //                    buffer[(64 * ((y / 8) + cs2)) + x++] = Font5x8[((letter - 32)*6) + i];
                        } else {

                            for (k = 0; k < 7; ++k) // Loop through the vertical pixels
                            {
                                if (bit_test(Font3x6[((letter - 32) * 3) + i], k)) {

                                    st7565_DrawPixel(x, y + k, 0);
                                } else {
                                    st7565_DrawPixel(x, y + k, 1);
                                }

                            }
                            x++;
                            //                    buffer[(64 * ((y / 8) + cs2)) + x++] = ~Font5x8[((letter - 32)*6) + i];
                        }
                    }

                    //            for (i = 0; i < 3; i++) {
                    //                buffer[(128 * ((y / 8))) + x++] = Font3x6[((letter - 32)*3) + i];
                    //            }
                    break;
                case 1:
                    if (color == 1) {
                        st7565_DrawLine(x, y - 1, x + 5, y - 1, 1);
                        st7565_DrawLine(x, y + 7, x + 5, y + 7, 1);
                        st7565_DrawLine(x + 6, y - 1, x + 6, y + 7, 1);
                    } else {
                        st7565_DrawLine(x, y - 1, x + 5, y - 1, 0);
                        st7565_DrawLine(x, y + 7, x + 5, y + 7, 0);
                        st7565_DrawLine(x + 6, y - 1, x + 6, y + 7, 0);
                    }

                    for (i = 0; i < 6; i++) {

                        if (color == 0) {

                            for (k = 0; k < 8; ++k) // Loop through the vertical pixels
                            {
                                if (bit_test(Font5x8[((letter - 32) * 6) + i], k)) {
                                    st7565_DrawPixel(x, y + k, 1);
                                } else {
                                    st7565_DrawPixel(x, y + k, 0);
                                }
                            }
                            x++;
                            //                    buffer[(64 * ((y / 8) + cs2)) + x++] = Font5x8[((letter - 32)*6) + i];
                        } else {

                            for (k = 0; k < 8; ++k) // Loop through the vertical pixels
                            {
                                if (bit_test(Font5x8[((letter - 32) * 6) + i], k)) {

                                    st7565_DrawPixel(x, y + k, 0);
                                } else {
                                    st7565_DrawPixel(x, y + k, 1);
                                }

                            }
                            x++;
                            //                    buffer[(64 * ((y / 8) + cs2)) + x++] = ~Font5x8[((letter - 32)*6) + i];
                        }
                    }
                    break;
                case 2:

                    for (k = 0; k < 24; k = k + 2) {

                        for (i = 0; i < 8; i++) {

                            if (bit_test(Font12x16[letter * 24 + k], (i))) {
                                st7565_DrawPixel(x + ~~(k / 2), y + i, 1);
                            } else {
                                st7565_DrawPixel(x + ~~(k / 2), y + i, 0);
                            }

                            if (bit_test(Font12x16[letter * 24 + k + 1], (i))) {
                                st7565_DrawPixel(x + ~~(k / 2), y + i + 8, 1);
                            } else {
                                st7565_DrawPixel(x + ~~(k / 2), y + i + 8, 0);
                            }

                        }
                    }

                    break;
                default:
                    for (i = 0; i < 5; i++) {

                        buffer[(128 * (~~(y / 8))) + x++] = Font5x8[((letter - 32) * 5) + i];
                    }
                    break;
            }
        }

        function st7565_DrawString(str, x, y, size, color) {

            var n = str.length;

            for (var i = 0; i < n; i++) {

                st7565_DrawChar(str[i], x, y, size, color);

                if (size == 0) {
                    x = x + 4;
                } else {
                    x = x + 6;
                }

            }


        };


        function st7565_DrawString2(str, x, y, size, color) {

            var n = str.length;

            for (var i = 0; i < n; i++) {
                st7565_DrawChar2(str[i], x, y, size, color);
                if (size == 0) {
                    x = x + 4;
                } else if (size == 1) {
                    x = x + 6;
                } else if (size == 2) {
                    x = x + 12;
                }
            }
        };

        function BaslangicEkran() {
            var i, x = 0, k, y = 0;

            st7565_DrawString2("  12            12:30", 0, 0, 1, 0);
            st7565_DrawChar(SYMBOL_DERECE, 24, 0, 1, 0); // 
            st7565_DrawChar(SYMBOL_KILIT, 55, 0, 1, 0); // 



            st7565_DrawString2("Vg=", 0, 30, 1, 0);
            st7565_DrawString2("V", 48, 30, 1, 0);

            st7565_DrawString2("Fg=", 0, 38, 1, 0);
            st7565_DrawString2("Hz", 48, 38, 1, 0);

            st7565_DrawLine(0, 8, 127, 8, 1);

            st7565_DrawChar2('U', 5, 11, 2, 1);
            st7565_DrawChar2('=', 18, 13, 0, 0);
            st7565_DrawPixel(21, 18, 1);  // eşittir işaretini uzatma
            st7565_DrawPixel(21, 16, 1);  // eşittir işaretini uzatma
            st7565_DrawString2("122", 22, 11, 2, 0);

            st7565_DrawChar2('I', 67, 11, 2, 1);
            st7565_DrawChar2('=', 78, 13, 0, 0);
            st7565_DrawPixel(81, 18, 1);  // eşittir işaretini uzatma
            st7565_DrawPixel(81, 16, 1);  // eşittir işaretini uzatma
            st7565_DrawString2("400", 85, 11, 2, 0);
            st7565_DrawString2('s', 77, 20, 1, 0);

            st7565_DrawChar2('I', 67, 30, 2, 1);
            st7565_DrawChar2('=', 78, 32, 0, 0);
            st7565_DrawPixel(81, 37, 1);  // eşittir işaretini uzatma
            st7565_DrawPixel(81, 35, 1);  // eşittir işaretini uzatma
            st7565_DrawString2("400", 85, 30, 2, 0);
            st7565_DrawString2('a', 77, 39, 1, 0);

            st7565_DrawLine(0, 47, 127, 47, 1);

            st7565_DrawString2("NORMAL S.", 15, 49, 1, 0);

            st7565_DrawLine(0, 57, 127, 57, 1);

            st7565_DrawString2("AKU KOPUK-- ARTI KACAK", 10, 57, 0, 0);
            st7565_DrawLine(0, 57, 127, 57, 1);

     
            st7565_DrawChar2(SYMBOL_BAT1, 1, 49, 1, 0); // 
            st7565_DrawChar2(SYMBOL_BAT2, 6, 49, 1, 0); // 

            st7565_DrawChar2(SYMBOL_THERMISTOR1, 75, 49, 1, 0); // 
            st7565_DrawChar2(SYMBOL_THERMISTOR2, 81, 49, 1, 0); // 
           
        }



        BaslangicEkran();


        function st7565_Refresh() {

            for (var p = 0; p < 8; p++) {
                for (var x = 0; x < 128; ++x) {

                    for (var i = 0; i < 8; ++i) {

                        if (IsBitSet(buffer[(128 * p) + x], i) == 1)
                            drawPixel(x, p * 8 + i, "#ECEFF3");
                        else
                            drawPixel(x, p * 8 + i, "#1D58CE");

                    }
                }
            }

        }

        st7565_Refresh();

    //alert(buffer[0]);



    </script>
</body>

</html>
